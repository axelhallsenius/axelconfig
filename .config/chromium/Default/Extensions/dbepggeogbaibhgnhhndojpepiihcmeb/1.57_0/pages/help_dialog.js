// Generated by CoffeeScript 1.9.3
(function() {
  var HelpDialog, root,
    hasProp = {}.hasOwnProperty;

  HelpDialog = {
    dialogElement: null,
    isShowing: function() {
      return true;
    },
    getShowAdvancedCommands: function() {
      return Settings.get("helpDialog_showAdvancedCommands");
    },
    init: function() {
      if (this.dialogElement != null) {
        return;
      }
      this.dialogElement = document.getElementById("vimiumHelpDialog");
      this.dialogElement.getElementsByClassName("closeButton")[0].addEventListener("click", (function(_this) {
        return function(clickEvent) {
          clickEvent.preventDefault();
          return _this.hide();
        };
      })(this), false);
      document.getElementById("helpDialogOptionsPage").addEventListener("click", function(clickEvent) {
        clickEvent.preventDefault();
        return chrome.runtime.sendMessage({
          handler: "openOptionsPageInNewTab"
        });
      }, false);
      document.getElementById("toggleAdvancedCommands").addEventListener("click", HelpDialog.toggleAdvancedCommands, false);
      return document.documentElement.addEventListener("click", (function(_this) {
        return function(event) {
          if (!_this.dialogElement.contains(event.target)) {
            return _this.hide();
          }
        };
      })(this), false);
    },
    show: function(arg) {
      var element, fn, html, htmlString, i, len, placeholder, ref;
      html = arg.html;
      for (placeholder in html) {
        if (!hasProp.call(html, placeholder)) continue;
        htmlString = html[placeholder];
        this.dialogElement.querySelector("#help-dialog-" + placeholder).innerHTML = htmlString;
      }
      this.showAdvancedCommands(this.getShowAdvancedCommands());
      ref = this.dialogElement.getElementsByClassName("commandName");
      fn = function(element) {
        element.setAttribute("role", "link");
        return element.addEventListener("click", function() {
          var commandName;
          commandName = element.textContent;
          chrome.runtime.sendMessage({
            handler: "copyToClipboard",
            data: commandName
          });
          return HUD.showForDuration("Yanked " + commandName + ".", 2000);
        });
      };
      for (i = 0, len = ref.length; i < len; i++) {
        element = ref[i];
        fn(element);
      }
      return DomUtils.simulateClick(this.dialogElement);
    },
    hide: function() {
      return UIComponentServer.hide();
    },
    toggle: function() {
      return this.hide();
    },
    toggleAdvancedCommands: function(event) {
      var showAdvanced;
      event.preventDefault();
      showAdvanced = HelpDialog.getShowAdvancedCommands();
      HelpDialog.showAdvancedCommands(!showAdvanced);
      return Settings.set("helpDialog_showAdvancedCommands", !showAdvanced);
    },
    showAdvancedCommands: function(visible) {
      var addOrRemove;
      document.getElementById("toggleAdvancedCommands").innerHTML = visible ? "Hide advanced commands" : "Show advanced commands";
      addOrRemove = visible ? "add" : "remove";
      return HelpDialog.dialogElement.classList[addOrRemove]("showAdvanced");
    }
  };

  UIComponentServer.registerHandler(function(event) {
    var ref;
    switch ((ref = event.data.name) != null ? ref : event.data) {
      case "hide":
        return HelpDialog.hide();
      case "activate":
        HelpDialog.init();
        HelpDialog.show(event.data);
        Frame.postMessage("registerFrame");
        return Mode.setIndicator();
      case "hidden":
        Frame.postMessage("unregisterFrame");
        return HUD.abandon();
    }
  });

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.HelpDialog = HelpDialog;

  root.isVimiumHelpDialog = true;

}).call(this);
