// Generated by CoffeeScript 1.9.3
(function() {
  var Commands, commandDescriptions, defaultKeyMappings, ref, ref1, root,
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  Commands = {
    init: function() {
      var command, descriptor;
      for (command in commandDescriptions) {
        if (!hasProp.call(commandDescriptions, command)) continue;
        descriptor = commandDescriptions[command];
        this.addCommand(command, descriptor[0], descriptor[1]);
      }
      this.loadKeyMappings(Settings.get("keyMappings"));
      return Settings.postUpdateHooks["keyMappings"] = this.loadKeyMappings.bind(this);
    },
    loadKeyMappings: function(customKeyMappings) {
      this.clearKeyMappingsAndSetDefaults();
      this.parseCustomKeyMappings(customKeyMappings);
      return this.generateKeyStateMapping();
    },
    availableCommands: {},
    keyToCommandRegistry: {},
    addCommand: function(command, description, options) {
      if (options == null) {
        options = {};
      }
      if (command in this.availableCommands) {
        BgUtils.log(command + " is already defined! Check commands.coffee for duplicates.");
        return;
      }
      return this.availableCommands[command] = extend(options, {
        description: description
      });
    },
    mapKeyToCommand: function(arg) {
      var command, key, options;
      key = arg.key, command = arg.command, options = arg.options;
      if (!this.availableCommands[command]) {
        BgUtils.log(command + " doesn't exist!");
        return;
      }
      if (options == null) {
        options = {};
      }
      return this.keyToCommandRegistry[key] = extend({
        command: command,
        options: options
      }, this.availableCommands[command]);
    },
    normalizeKey: function(key) {
      return key.replace(/<[acm]-/ig, function(match) {
        return match.toLowerCase();
      }).replace(/<([acm]-)?([a-zA-Z0-9]{2,})>/g, function(match, optionalPrefix, keyName) {
        return "<" + (optionalPrefix ? optionalPrefix : "") + keyName.toLowerCase() + ">";
      });
    },
    parseCustomKeyMappings: function(customKeyMappings) {
      var _, command, i, key, len, line, optionList, ref, tokens;
      ref = customKeyMappings.split("\n");
      for (i = 0, len = ref.length; i < len; i++) {
        line = ref[i];
        if (!(line[0] === "\"" || line[0] === "#")) {
          tokens = line.replace(/\s+$/, "").split(/\s+/);
          switch (tokens[0]) {
            case "map":
              _ = tokens[0], key = tokens[1], command = tokens[2], optionList = 4 <= tokens.length ? slice.call(tokens, 3) : [];
              if ((command != null) && this.availableCommands[command]) {
                key = this.normalizeKey(key);
                BgUtils.log("Mapping " + key + " to " + command);
                this.mapKeyToCommand({
                  key: key,
                  command: command,
                  options: this.parseCommandOptions(command, optionList)
                });
              }
              break;
            case "unmap":
              if (tokens.length === 2) {
                key = this.normalizeKey(tokens[1]);
                BgUtils.log("Unmapping " + key);
                delete this.keyToCommandRegistry[key];
              }
              break;
            case "unmapAll":
              this.keyToCommandRegistry = {};
          }
        }
      }
      return Settings.set("passNextKeyKeys", (function() {
        var ref1, results;
        ref1 = this.keyToCommandRegistry;
        results = [];
        for (key in ref1) {
          if (!hasProp.call(ref1, key)) continue;
          if (this.keyToCommandRegistry[key].command === "passNextKey" && 1 < key.length) {
            results.push(key);
          }
        }
        return results;
      }).call(this));
    },
    parseCommandOptions: function(command, optionList) {
      var i, len, option, options, parse;
      options = {};
      for (i = 0, len = optionList.length; i < len; i++) {
        option = optionList[i];
        parse = option.split("=", 2);
        options[parse[0]] = parse.length === 1 ? true : parse[1];
      }
      if ("count" in options) {
        options.count = parseInt(options.count);
        if (isNaN(options.count) || this.availableCommands[command].noRepeat) {
          delete options.count;
        }
      }
      return options;
    },
    clearKeyMappingsAndSetDefaults: function() {
      var command, key, results;
      this.keyToCommandRegistry = {};
      results = [];
      for (key in defaultKeyMappings) {
        if (!hasProp.call(defaultKeyMappings, key)) continue;
        command = defaultKeyMappings[key];
        results.push(this.mapKeyToCommand({
          key: key,
          command: command
        }));
      }
      return results;
    },
    generateKeyStateMapping: function() {
      var currentMapping, key, keyStateMapping, keys, namedKeyRegex, ref, ref1, ref2, registryEntry;
      namedKeyRegex = /^(<(?:[amc]-.|(?:[amc]-)?[a-z0-9]{2,})>)(.*)$/;
      keyStateMapping = {};
      ref = this.keyToCommandRegistry;
      for (keys in ref) {
        if (!hasProp.call(ref, keys)) continue;
        registryEntry = ref[keys];
        currentMapping = keyStateMapping;
        while (0 < keys.length) {
          ref1 = 0 === keys.search(namedKeyRegex) ? [RegExp.$1, RegExp.$2] : [keys[0], keys.slice(1)], key = ref1[0], keys = ref1[1];
          if ((ref2 = currentMapping[key]) != null ? ref2.command : void 0) {
            break;
          } else if (0 < keys.length) {
            currentMapping = currentMapping[key] != null ? currentMapping[key] : currentMapping[key] = {};
          } else {
            currentMapping[key] = registryEntry;
          }
        }
      }
      return chrome.storage.local.set({
        normalModeKeyStateMapping: keyStateMapping
      });
    },
    commandGroups: {
      pageNavigation: ["scrollDown", "scrollUp", "scrollToTop", "scrollToBottom", "scrollPageDown", "scrollPageUp", "scrollFullPageDown", "scrollFullPageUp", "scrollLeft", "scrollRight", "scrollToLeft", "scrollToRight", "reload", "copyCurrentUrl", "openCopiedUrlInCurrentTab", "openCopiedUrlInNewTab", "goUp", "goToRoot", "enterInsertMode", "enterVisualMode", "enterVisualLineMode", "passNextKey", "focusInput", "LinkHints.activateMode", "LinkHints.activateModeToOpenInNewTab", "LinkHints.activateModeToOpenInNewForegroundTab", "LinkHints.activateModeWithQueue", "LinkHints.activateModeToDownloadLink", "LinkHints.activateModeToOpenIncognito", "LinkHints.activateModeToCopyLinkUrl", "goPrevious", "goNext", "nextFrame", "mainFrame", "Marks.activateCreateMode", "Marks.activateGotoMode"],
      vomnibarCommands: ["Vomnibar.activate", "Vomnibar.activateInNewTab", "Vomnibar.activateBookmarks", "Vomnibar.activateBookmarksInNewTab", "Vomnibar.activateTabSelection", "Vomnibar.activateEditUrl", "Vomnibar.activateEditUrlInNewTab"],
      findCommands: ["enterFindMode", "performFind", "performBackwardsFind"],
      historyNavigation: ["goBack", "goForward"],
      tabManipulation: ["createTab", "previousTab", "nextTab", "visitPreviousTab", "firstTab", "lastTab", "duplicateTab", "togglePinTab", "toggleMuteTab", "removeTab", "restoreTab", "moveTabToNewWindow", "closeTabsOnLeft", "closeTabsOnRight", "closeOtherTabs", "moveTabLeft", "moveTabRight"],
      misc: ["showHelp", "toggleViewSource"]
    },
    advancedCommands: ["scrollToLeft", "scrollToRight", "moveTabToNewWindow", "goUp", "goToRoot", "LinkHints.activateModeWithQueue", "LinkHints.activateModeToDownloadLink", "Vomnibar.activateEditUrl", "Vomnibar.activateEditUrlInNewTab", "LinkHints.activateModeToOpenIncognito", "LinkHints.activateModeToCopyLinkUrl", "goNext", "goPrevious", "Marks.activateCreateMode", "Marks.activateGotoMode", "moveTabLeft", "moveTabRight", "closeTabsOnLeft", "closeTabsOnRight", "closeOtherTabs", "enterVisualLineMode", "toggleViewSource", "passNextKey"]
  };

  defaultKeyMappings = {
    "?": "showHelp",
    "j": "scrollDown",
    "k": "scrollUp",
    "h": "scrollLeft",
    "l": "scrollRight",
    "gg": "scrollToTop",
    "G": "scrollToBottom",
    "zH": "scrollToLeft",
    "zL": "scrollToRight",
    "<c-e>": "scrollDown",
    "<c-y>": "scrollUp",
    "d": "scrollPageDown",
    "u": "scrollPageUp",
    "r": "reload",
    "gs": "toggleViewSource",
    "i": "enterInsertMode",
    "v": "enterVisualMode",
    "V": "enterVisualLineMode",
    "H": "goBack",
    "L": "goForward",
    "gu": "goUp",
    "gU": "goToRoot",
    "gi": "focusInput",
    "f": "LinkHints.activateMode",
    "F": "LinkHints.activateModeToOpenInNewTab",
    "<a-f>": "LinkHints.activateModeWithQueue",
    "yf": "LinkHints.activateModeToCopyLinkUrl",
    "/": "enterFindMode",
    "n": "performFind",
    "N": "performBackwardsFind",
    "[[": "goPrevious",
    "]]": "goNext",
    "yy": "copyCurrentUrl",
    "p": "openCopiedUrlInCurrentTab",
    "P": "openCopiedUrlInNewTab",
    "K": "nextTab",
    "J": "previousTab",
    "gt": "nextTab",
    "gT": "previousTab",
    "^": "visitPreviousTab",
    "<<": "moveTabLeft",
    ">>": "moveTabRight",
    "g0": "firstTab",
    "g$": "lastTab",
    "W": "moveTabToNewWindow",
    "t": "createTab",
    "yt": "duplicateTab",
    "x": "removeTab",
    "X": "restoreTab",
    "<a-p>": "togglePinTab",
    "<a-m>": "toggleMuteTab",
    "o": "Vomnibar.activate",
    "O": "Vomnibar.activateInNewTab",
    "T": "Vomnibar.activateTabSelection",
    "b": "Vomnibar.activateBookmarks",
    "B": "Vomnibar.activateBookmarksInNewTab",
    "ge": "Vomnibar.activateEditUrl",
    "gE": "Vomnibar.activateEditUrlInNewTab",
    "gf": "nextFrame",
    "gF": "mainFrame",
    "m": "Marks.activateCreateMode",
    "`": "Marks.activateGotoMode"
  };

  commandDescriptions = {
    showHelp: [
      "Show help", {
        topFrame: true,
        noRepeat: true
      }
    ],
    scrollDown: ["Scroll down"],
    scrollUp: ["Scroll up"],
    scrollLeft: ["Scroll left"],
    scrollRight: ["Scroll right"],
    scrollToTop: ["Scroll to the top of the page"],
    scrollToBottom: [
      "Scroll to the bottom of the page", {
        noRepeat: true
      }
    ],
    scrollToLeft: [
      "Scroll all the way to the left", {
        noRepeat: true
      }
    ],
    scrollToRight: [
      "Scroll all the way to the right", {
        noRepeat: true
      }
    ],
    scrollPageDown: ["Scroll a half page down"],
    scrollPageUp: ["Scroll a half page up"],
    scrollFullPageDown: ["Scroll a full page down"],
    scrollFullPageUp: ["Scroll a full page up"],
    reload: [
      "Reload the page", {
        noRepeat: true
      }
    ],
    toggleViewSource: [
      "View page source", {
        noRepeat: true
      }
    ],
    copyCurrentUrl: [
      "Copy the current URL to the clipboard", {
        noRepeat: true
      }
    ],
    openCopiedUrlInCurrentTab: [
      "Open the clipboard's URL in the current tab", {
        background: true,
        noRepeat: true
      }
    ],
    openCopiedUrlInNewTab: [
      "Open the clipboard's URL in a new tab", {
        background: true,
        repeatLimit: 20
      }
    ],
    enterInsertMode: [
      "Enter insert mode", {
        noRepeat: true
      }
    ],
    passNextKey: ["Pass the next key to Chrome"],
    enterVisualMode: [
      "Enter visual mode", {
        noRepeat: true
      }
    ],
    enterVisualLineMode: [
      "Enter visual line mode", {
        noRepeat: true
      }
    ],
    focusInput: ["Focus the first text input on the page"],
    "LinkHints.activateMode": ["Open a link in the current tab"],
    "LinkHints.activateModeToOpenInNewTab": ["Open a link in a new tab"],
    "LinkHints.activateModeToOpenInNewForegroundTab": ["Open a link in a new tab & switch to it"],
    "LinkHints.activateModeWithQueue": [
      "Open multiple links in a new tab", {
        noRepeat: true
      }
    ],
    "LinkHints.activateModeToOpenIncognito": ["Open a link in incognito window"],
    "LinkHints.activateModeToDownloadLink": ["Download link url"],
    "LinkHints.activateModeToCopyLinkUrl": ["Copy a link URL to the clipboard"],
    enterFindMode: [
      "Enter find mode", {
        noRepeat: true
      }
    ],
    performFind: ["Cycle forward to the next find match"],
    performBackwardsFind: ["Cycle backward to the previous find match"],
    goPrevious: [
      "Follow the link labeled previous or <", {
        noRepeat: true
      }
    ],
    goNext: [
      "Follow the link labeled next or >", {
        noRepeat: true
      }
    ],
    goBack: ["Go back in history"],
    goForward: ["Go forward in history"],
    goUp: ["Go up the URL hierarchy"],
    goToRoot: ["Go to root of current URL hierarchy"],
    nextTab: [
      "Go one tab right", {
        background: true
      }
    ],
    previousTab: [
      "Go one tab left", {
        background: true
      }
    ],
    visitPreviousTab: [
      "Go to previously-visited tab", {
        background: true
      }
    ],
    firstTab: [
      "Go to the first tab", {
        background: true
      }
    ],
    lastTab: [
      "Go to the last tab", {
        background: true
      }
    ],
    createTab: [
      "Create new tab", {
        background: true,
        repeatLimit: 20
      }
    ],
    duplicateTab: [
      "Duplicate current tab", {
        background: true,
        repeatLimit: 20
      }
    ],
    removeTab: [
      "Close current tab", {
        background: true,
        repeatLimit: (ref = (ref1 = chrome.session) != null ? ref1.MAX_SESSION_RESULTS : void 0) != null ? ref : 25
      }
    ],
    restoreTab: [
      "Restore closed tab", {
        background: true,
        repeatLimit: 20
      }
    ],
    moveTabToNewWindow: [
      "Move tab to new window", {
        background: true
      }
    ],
    togglePinTab: [
      "Pin or unpin current tab", {
        background: true,
        noRepeat: true
      }
    ],
    toggleMuteTab: [
      "Mute or unmute current tab", {
        background: true,
        noRepeat: true
      }
    ],
    closeTabsOnLeft: [
      "Close tabs on the left", {
        background: true,
        noRepeat: true
      }
    ],
    closeTabsOnRight: [
      "Close tabs on the right", {
        background: true,
        noRepeat: true
      }
    ],
    closeOtherTabs: [
      "Close all other tabs", {
        background: true,
        noRepeat: true
      }
    ],
    moveTabLeft: [
      "Move tab to the left", {
        background: true
      }
    ],
    moveTabRight: [
      "Move tab to the right", {
        background: true
      }
    ],
    "Vomnibar.activate": [
      "Open URL, bookmark or history entry", {
        topFrame: true
      }
    ],
    "Vomnibar.activateInNewTab": [
      "Open URL, bookmark or history entry in a new tab", {
        topFrame: true
      }
    ],
    "Vomnibar.activateTabSelection": [
      "Search through your open tabs", {
        topFrame: true
      }
    ],
    "Vomnibar.activateBookmarks": [
      "Open a bookmark", {
        topFrame: true
      }
    ],
    "Vomnibar.activateBookmarksInNewTab": [
      "Open a bookmark in a new tab", {
        topFrame: true
      }
    ],
    "Vomnibar.activateEditUrl": [
      "Edit the current URL", {
        topFrame: true
      }
    ],
    "Vomnibar.activateEditUrlInNewTab": [
      "Edit the current URL and open in a new tab", {
        topFrame: true
      }
    ],
    nextFrame: [
      "Select the next frame on the page", {
        background: true
      }
    ],
    mainFrame: [
      "Select the page's main/top frame", {
        topFrame: true,
        noRepeat: true
      }
    ],
    "Marks.activateCreateMode": [
      "Create a new mark", {
        noRepeat: true
      }
    ],
    "Marks.activateGotoMode": [
      "Go to a mark", {
        noRepeat: true
      }
    ]
  };

  Commands.init();

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Commands = Commands;

}).call(this);
